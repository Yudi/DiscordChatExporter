name: main

on:
  workflow_dispatch:
  push:
    branches:
      - master
    tags:
      - "*"
  pull_request:
    branches:
      - master

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  format:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install .NET
        uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9 # v4.3.1
        with:
          dotnet-version: 9.0.x

      # Build the project separately to discern between build and format errors
      - name: Build
        run: >
          dotnet build
          -p:CSharpier_Bypass=true
          --configuration Release

      - name: Verify formatting
        id: verify
        run: >
          dotnet build
          -t:CSharpierFormat
          --configuration Release
          --no-restore

      - name: Report issues
        if: ${{ failure() && steps.verify.outcome == 'failure' }}
        run: echo "::error title=Bad formatting::Formatting issues detected. Please build the solution locally to fix them."

  test:
    # Tests need access to secrets, so we can't run them against PRs because of limited trust
    if: ${{ github.event_name != 'pull_request' }}

    runs-on: ubuntu-latest
    timeout-minutes: 10

    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install .NET
        uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9 # v4.3.1
        with:
          dotnet-version: 9.0.x

      - name: Run tests
        env:
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
        run: >
          dotnet test
          -p:CSharpier_Bypass=true
          --configuration Release
          --logger "GitHubActions;summary.includePassedTests=true;summary.includeSkippedTests=true"
          --collect:"XPlat Code Coverage"
          --
          RunConfiguration.CollectSourceInformation=true
          DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover

      - name: Upload coverage
        uses: codecov/codecov-action@ad3126e916f78f00edff4ed0317cf185271ccc2d # v5.4.2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  pack:
    strategy:
      matrix:
        app:
          - DiscordChatExporter.Cli
          - DiscordChatExporter.Gui
        rid:
          - win-arm64
          - win-x86
          - win-x64
          - linux-arm
          - linux-arm64
          - linux-musl-x64
          - linux-x64
          # The two macOS builds will be used to create a universal binary in the pack-macos job
          - osx-arm64
          - osx-x64
        include:
          - app: DiscordChatExporter.Cli
            asset: DiscordChatExporter.Cli
          - app: DiscordChatExporter.Gui
            # GUI assets aren't suffixed, unlike the CLI assets
            asset: DiscordChatExporter

    runs-on: ${{ startsWith(matrix.rid, 'win-') && 'windows-latest' || startsWith(matrix.rid, 'osx-') && 'macos-latest' || 'ubuntu-latest' }}
    timeout-minutes: 10

    permissions:
      actions: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install .NET
        uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9 # v4.3.1
        with:
          dotnet-version: 9.0.x

      - name: Publish app
        run: >
          dotnet publish ${{ matrix.app }}
          -p:Version=${{ github.ref_type == 'tag' && github.ref_name || format('999.9.9-ci-{0}', github.sha) }}
          -p:CSharpier_Bypass=true
          --output ${{ matrix.app }}/bin/publish/
          --configuration Release
          --runtime ${{ matrix.rid }}
          --self-contained

      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ matrix.asset }}.${{ matrix.rid }}
          path: ${{ matrix.app }}/bin/publish/
          if-no-files-found: error

  pack-macos:
    runs-on: macos-latest
    timeout-minutes: 10

    # This now needs to run after the individual arch builds are complete
    needs: pack

    strategy:
      matrix:
        app:
          - DiscordChatExporter.Cli
          - DiscordChatExporter.Gui
        include:
          - app: DiscordChatExporter.Cli
            asset: DiscordChatExporter.Cli
          - app: DiscordChatExporter.Gui
            # GUI assets aren't suffixed, unlike the CLI assets
            asset: DiscordChatExporter

    permissions:
      actions: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Download macOS arm64 artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: ${{ matrix.asset }}.osx-arm64
          path: ${{ matrix.app }}/bin/publish/

      - name: Download macOS x64 artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: ${{ matrix.asset }}.osx-x64
          path: ${{ matrix.app }}/bin/publish/

      - name: Debug ls directory
        run: |
          ls -la ${{ matrix.app }}/bin/publish/ 
          ls -la ${{ matrix.app }}/bin/publish/${{ matrix.asset }}.osx-arm64
          ls -la ${{ matrix.app }}/bin/publish/${{ matrix.asset }}.osx-x64

      - name: Create macOS universal binaries
        run: |
          # Lipo is Apple's tool for creating universal binaries
          lipo -create \
            -output ${{ matrix.app }}/bin/publish/${{ matrix.asset }}.macos-universal \
            ${{ matrix.app }}/bin/publish/${{ matrix.asset }}.osx-arm64 \
            ${{ matrix.app }}/bin/publish/${{ matrix.asset }}.osx-x64

          # Set executable permissions
          chmod +x ${{ matrix.app }}/bin/publish/${{ matrix.asset }}.macos-universal

      - name: Pack Gui to .app bundle
        if: matrix.app == 'DiscordChatExporter.Gui'
        run: |
          # Create the necessary directory structure for the .app bundle
          mkdir -p ${{ matrix.app }}/bin/publish/${{ matrix.asset }}.app/Contents/MacOS
          mkdir -p ${{ matrix.app }}/bin/publish/${{ matrix.asset }}.app/Contents/Resources

          # Copy the universal binary to the MacOS directory
          cp ${{ matrix.app }}/bin/publish/${{ matrix.asset }}.macos-universal \
              ${{ matrix.app }}/bin/publish/${{ matrix.asset }}.app/Contents/MacOS/${{ matrix.asset }}

          # Create Info.plist file
          cat > ${{ matrix.app }}/bin/publish/${{ matrix.asset }}.app/Contents/Info.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>DiscordChatExporter</string>
              <key>NSHumanReadableCopyright</key>
              <string>Copyright (c) Oleksii Holub</string>
              <key>CFBundleIdentifier</key>
              <string>com.tyrrrz.${{ matrix.asset }}</string>
              <key>CFBundleName</key>
              <string>${{ matrix.asset }}</string>
              <key>CFBundleDisplayName</key>
              <string>DiscordChatExporter</string>
              <key>CFBundleVersion</key>
              <string>${{ github.ref_type == 'tag' && github.ref_name || format('999.9.9-ci-{0}', github.sha) }}</string>
              <key>CFBundleShortVersionString</key>
              <string>${{ github.ref_type == 'tag' && github.ref_name || format('999.9.9-ci-{0}', github.sha) }}</string>
              <key>NSHighResolutionCapable</key>
              <true/>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
          </dict>
          </plist>
          EOF

          # Copy all files to the .app bundle
          cp -R ${{ matrix.app }}/bin/publish/* ${{ matrix.app }}/bin/publish/${{ matrix.asset }}.app/Contents/MacOS/

          # TODO: convert icon
          # Copy the icon file if it exists
          if [ -f "favicon.icns" ]; then
            cp favicon.icns ${{ matrix.app }}/bin/publish/${{ matrix.asset }}.app/Contents/Resources/
          fi

      # Create zip archives for the universal binaries
      - name: Create universal binary zip archives
        run: |
          # Go to the publish directory
          cd ${{ matrix.app }}/bin/publish/

          # For CLI, just zip the universal binary and supporting files
          if [[ "${{ matrix.app }}" == "DiscordChatExporter.Cli" ]]; then
            zip -r ${{ matrix.asset }}.macos-universal.zip . -x "*.osx-arm64" -x "*.osx-x64" -x "*.app/*"
          else
            # For GUI, zip both the standalone binary and the .app bundle
            zip -r ${{ matrix.asset }}.macos-universal.zip . -x "*.osx-arm64" -x "*.osx-x64"
          fi

      # Upload the universal binary packages as artifacts
      - name: Upload universal binary artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ matrix.asset }}.macos-universal
          path: ${{ matrix.app }}/bin/publish/${{ matrix.asset }}.macos-universal.zip
          if-no-files-found: error

  release:
    if: ${{ github.ref_type == 'tag' }}

    needs:
      - format
      # - test
      - pack
      - pack-macos

    runs-on: ubuntu-latest
    timeout-minutes: 10

    permissions:
      contents: write

    steps:
      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >
          gh release create ${{ github.ref_name }}
          --repo ${{ github.event.repository.full_name }}
          --title ${{ github.ref_name }}
          --generate-notes
          --verify-tag

  deploy:
    needs: release

    strategy:
      matrix:
        app:
          - DiscordChatExporter.Cli
          - DiscordChatExporter.Gui
        rid:
          - win-arm64
          - win-x86
          - win-x64
          - linux-arm
          - linux-arm64
          - linux-musl-x64
          - linux-x64
          - macos-universal
        include:
          - app: DiscordChatExporter.Cli
            asset: DiscordChatExporter.Cli
          - app: DiscordChatExporter.Gui
            # GUI assets aren't suffixed, unlike the CLI assets
            asset: DiscordChatExporter

    runs-on: ubuntu-latest
    timeout-minutes: 10

    permissions:
      actions: read
      contents: write

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: ${{ matrix.asset }}.${{ matrix.rid }}
          path: ${{ matrix.app }}/

      - name: Set permissions
        if: ${{ !startsWith(matrix.rid, 'win-') || !startsWith(matrix.rid, 'osx-') }}
        run: chmod +x ${{ matrix.app }}/${{ matrix.asset }}

      - name: Create package
        if: ${{ !startsWith(matrix.rid, 'osx-') }}
        # Change into the artifacts directory to avoid including the directory itself in the zip archive
        working-directory: ${{ matrix.app }}/
        run: zip -r ../${{ matrix.asset }}.${{ matrix.rid }}.zip .

      - name: Upload release asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >
          gh release upload ${{ github.ref_name }}
          ${{ matrix.asset }}.${{ matrix.rid }}.zip
          --repo ${{ github.event.repository.full_name }}

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    timeout-minutes: 10

    permissions:
      contents: read

    steps:
      - name: Notify Discord
        uses: tyrrrz/action-http-request@1dd7ad841a34b9299f3741f7c7399f9feefdfb08 # 1.1.3
        with:
          url: ${{ secrets.DISCORD_WEBHOOK }}
          method: POST
          headers: |
            Content-Type: application/json; charset=UTF-8
          body: |
            {
              "avatar_url": "https://raw.githubusercontent.com/${{ github.event.repository.full_name }}/${{ github.ref_name }}/favicon.png",
              "content": "[**${{ github.event.repository.name }}**](<${{ github.event.repository.html_url }}>) v${{ github.ref_name }} has been released!"
            }
          retry-count: 5
